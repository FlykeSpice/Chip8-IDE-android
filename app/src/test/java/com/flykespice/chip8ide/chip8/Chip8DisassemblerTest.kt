package com.flykespice.chip8ide.chip8

import junit.framework.TestCase.assertTrue
import org.junit.Test

//Maze rom
private val rom = intArrayOf(
    0x12,0x5,0x43,0x38,0x50,0x60,0x0,0x85,0x0,0x60,0x1,0x81,0x50,0xA3,0xE6,0xF1,0x1E,0xF0,0x55,0x60,
    0x1F,0x8A,0x0,0x60,0x0,0x8B,0x0,0xA3,0xC2,0xF0,0x65,0xA3,0xC2,0xDA,0xB1,0x60,0x1,0xA3,0xC3,0xF0,
    0x55,0x60,0x1F,0xA4,0x6,0xF0,0x55,0x60,0x1,0xA3,0xC4,0xF0,0x55,0xA3,0xC3,0xF0,0x65,0x85,0x0,0x60,
    0x1,0x81,0x0,0x80,0x50,0x80,0x14,0xA4,0x7,0xF0,0x55,0xA3,0xC4,0xF0,0x65,0x85,0x0,0x60,0x1,0x81,
    0x0,0x80,0x50,0x80,0x15,0xA3,0xC5,0xF0,0x55,0xA3,0xC4,0xF0,0x65,0x85,0x0,0xA3,0xC5,0xF0,0x65,0xA3,
    0xE6,0xF0,0x1E,0xF0,0x65,0x86,0x0,0xA3,0xC4,0xF0,0x65,0x87,0x0,0x60,0x1,0x81,0x0,0x80,0x70,0x80,
    0x14,0xA3,0xE6,0xF0,0x1E,0xF0,0x65,0x81,0x0,0x80,0x60,0x80,0x13,0x81,0x50,0xA3,0xC6,0xF1,0x1E,0xF0,
    0x55,0xA3,0xC5,0xF0,0x65,0x85,0x0,0xA3,0xC5,0xF0,0x65,0xA3,0xC6,0xF0,0x1E,0xF0,0x65,0x81,0x50,0xA3,
    0xE6,0xF1,0x1E,0xF0,0x55,0xA3,0xC4,0xF0,0x65,0xA3,0xC6,0xF0,0x1E,0xF0,0x65,0x85,0x0,0x60,0x1,0x81,
    0x50,0x50,0x10,0x6F,0x1,0x3F,0x0,0x12,0xF9,0xA3,0xC4,0xF0,0x65,0x85,0x0,0x60,0x1F,0x81,0x0,0x80,
    0x50,0x80,0x14,0x8A,0x0,0xA3,0xC3,0xF0,0x65,0x8B,0x0,0xA3,0xC2,0xF0,0x65,0xA3,0xC2,0xDA,0xB1,0x60,
    0x1F,0x85,0x0,0xA3,0xC4,0xF0,0x65,0x81,0x0,0x80,0x50,0x80,0x15,0x8A,0x0,0xA3,0xC3,0xF0,0x65,0x8B,
    0x0,0xA3,0xC2,0xF0,0x65,0xA3,0xC2,0xDA,0xB1,0xA3,0xC4,0xF0,0x65,0x85,0x0,0xA4,0x7,0xF0,0x65,0x81,
    0x0,0x80,0x50,0x82,0x10,0x81,0x5,0x81,0x20,0x90,0x10,0x6F,0x0,0x3F,0x1,0x13,0x21,0xA3,0xC4,0xF0,
    0x65,0x70,0x1,0xA3,0xC4,0xF0,0x55,0x12,0x47,0xA3,0xC3,0xF0,0x65,0x85,0x0,0xA4,0x6,0xF0,0x65,0x81,
    0x0,0x80,0x50,0x82,0x10,0x81,0x5,0x81,0x20,0x90,0x10,0x6F,0x0,0x3F,0x1,0x13,0x49,0xA3,0xC3,0xF0,
    0x65,0x70,0x1,0xA3,0xC3,0xF0,0x55,0x12,0x2F,0x13,0x49,0x81,0x0,0xA4,0x8,0x62,0x1,0x8E,0x25,0xFE,
    0x1E,0xF0,0x65,0x0,0xEE,0x62,0x1,0x63,0x0,0x83,0x4,0x81,0x25,0x31,0x0,0x13,0x5D,0x80,0x30,0x0,
    0xEE,0xA4,0x8,0xFE,0x1E,0xF6,0x55,0x66,0x0,0x82,0x0,0x82,0x15,0x3F,0x1,0x13,0x95,0x83,0x0,0x83,
    0x6,0x84,0x10,0x65,0x1,0x82,0x30,0x82,0x45,0x3F,0x1,0x13,0x8F,0x84,0xE,0x85,0xE,0x13,0x81,0x80,
    0x45,0x86,0x54,0x13,0x71,0xF5,0x65,0x80,0x60,0x0,0xEE,0x82,0x0,0x80,0x15,0x3F,0x0,0x13,0x9B,0x80,
    0x20,0x0,0xEE,0xA3,0xBF,0xF0,0x33,0xF2,0x65,0xF0,0x29,0xD3,0x45,0x73,0x6,0xF1,0x29,0xD3,0x45,0x73,
    0x6,0xF2,0x29,0xD3,0x45,0x0,0xEE,0x28,0x63,0x29,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
    0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
)

class Chip8DisassemblerTest {

    @Test
    fun disassemble_returnedDisasm_canBeAssembledBack() {
        val disasm = Chip8Disassembler.disassemble(rom)
        val assembledBack = Chip8Assembler.assemble(disasm)

        assertTrue(rom.contentEquals(assembledBack))
    }
}

